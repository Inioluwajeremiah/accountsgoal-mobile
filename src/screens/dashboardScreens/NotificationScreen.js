import {
  View,
  Text,
  SafeAreaView,
  ScrollView,
  TouchableOpacity,
  Pressable,
  FlatList,
  ActivityIndicator,
  Platform,
} from "react-native";
import React, { useRef, useState } from "react";
import BackIcon from "../../Icons/BackIcon";
import CustomTextRegular from "../../components/CustomTextRegular";
import LottieLoadingScreen from "../../components/LottieLoadingScreen";
import {
  useGetAllGreetingsQuery,
  useGetEmailDataQuery,
} from "../../slices/emailApiSlice";
import NotificationCard from "../../components/NotificationCard";
import { useSelector } from "react-redux";
import {
  status_bar_height,
  windowHeight,
  windowWidth,
} from "../../utils/Dimensions";

const NotificationScreen = ({ navigation, route }) => {
  const { accountsGoalUser } = useSelector((state) => state.acgUser);
  const { uniqueId } = route?.params;
  const [currentIndex, setCurrentIndex] = useState(0);
  const goalsEmailListRef = useRef(null);
  const activityEmailListRef = useRef(null);
  const scrollViewRef = useRef(null);

  const handleHorizontalScroll = (e) => {
    const scrollWidth = e.nativeEvent.contentOffset.x;
    const objectIndex = Math.round(scrollWidth / windowWidth);
    setCurrentIndex(objectIndex);
  };
  // get all goals email by user
  const {
    data: allEmails,
    refetch,
    isLoading: loadingEmail,
    error: emailError,
  } = useGetEmailDataQuery({ userId: accountsGoalUser?._id });

  // get all greetings email by user
  const {
    data: allGreetingsEmail,
    isLoading: loadingGreetingsEmail,
    error: greetingsEmailError,
  } = useGetAllGreetingsQuery();

  console.log("useGetEmailDataQuery ==> ", allEmails);

  console.log("useGetAllGreetingsQuery ==> ", allGreetingsEmail);

  const headerComponent = () => {
    return (
      <>
        <TouchableOpacity
          className="mt-5 -ml-2"
          onPress={() => navigation.goBack()}
        >
          <BackIcon />
        </TouchableOpacity>
        {/* header */}
        <CustomTextRegular className="text-2xl font-bold text-center mt-2 ">
          Automated Email
        </CustomTextRegular>
        {/* <CustomTextRegular className="text-base leading-7 mt-6 text-black text-center px-5 mb-6">
          Send (or edit) recently autogenerated emails to clients
        </CustomTextRegular> */}
      </>
    );
  };

  const handleGoalsEmailTab = () => {
    setCurrentIndex(0);

    scrollViewRef.current.scrollTo({ x: 0, animated: true });
  };
  const handleActivitiesEmailTab = () => {
    setCurrentIndex(1);
    scrollViewRef.current.scrollTo({ x: windowWidth, animated: true });
  };

  return (
    <SafeAreaView
      className="flex-1"
      style={{ marginTop: Platform.OS === "ios" ? 0 : status_bar_height }}
    >
      {/* header */}
      <View className="mt-10 flex flex-row items-center px-5">
        <TouchableOpacity
          onPress={() => navigation.goBack()}
          className="-ml-2 py-2 pr-2"
        >
          <BackIcon />
        </TouchableOpacity>
        {/* header */}
        <CustomTextRegular className="text-base font-bold text-center ml-3 ">
          Automated Email
        </CustomTextRegular>
      </View>

      {/* tab indicator */}
      <View className="flex flex-row items-center justify-between px-5 mt-4 mb-4">
        <TouchableOpacity className="w-1/2" onPress={handleGoalsEmailTab}>
          <CustomTextRegular className="font-bold text-center">
            Goals
          </CustomTextRegular>
          <View
            className={`w-1/2 mx-auto mt-1 border-2 rounded-full ${currentIndex === 0 ? " border-primary-color " : "border-secondary-accent-color"}`}
          />
        </TouchableOpacity>
        <TouchableOpacity className="w-1/2" onPress={handleActivitiesEmailTab}>
          <CustomTextRegular className="font-bold text-center">
            Activity
          </CustomTextRegular>
          <View
            className={`w-1/2 mx-auto mt-1 border-2 rounded-full ${currentIndex === 1 ? " border-primary-color " : "border-secondary-accent-color"}`}
          />
        </TouchableOpacity>
      </View>

      <ScrollView
        horizontal
        onScroll={handleHorizontalScroll}
        showsHorizontalScrollIndicator={false}
        snapToStart={true}
        ref={scrollViewRef}
      >
        {/* first tab || Goals tab */}
        {allEmails && allEmails.emailDrafts?.length > 0 && (
          <FlatList
            // ListHeaderComponent={headerComponent}

            keyExtractor={(item) => item._id}
            className="px-5"
            scrollEnabled
            data={allEmails && allEmails.emailDrafts}
            renderItem={({ item, index }) => (
              <NotificationCard
                item={item}
                index={index}
                uniqueId={uniqueId ? uniqueId : ""}
                lastIndex={allEmails.emailDrafts.length - 1}
                sendTo={true}
              />
            )}
          />
        )}
        {loadingEmail && (
          <View
            style={{ width: windowWidth }}
            className="flex-1 justify-center items-center"
          >
            <ActivityIndicator size={"small"} color={"#4169E1"} />
          </View>
        )}
        {!loadingEmail && allEmails.emailDrafts.length === 0 && (
          <View
            style={{ width: windowWidth, marginTop: 20 }}
            className="h-full flex-1 justify-center items-center"
          >
            <CustomTextRegular className="text-center">
              No email message
            </CustomTextRegular>
          </View>
        )}

        {/* second tab || Activity */}

        {allGreetingsEmail && allGreetingsEmail.length > 0 ? (
          <FlatList
            ref={activityEmailListRef}
            // ListHeaderComponent={headerComponent}
            keyExtractor={(item) => item._id}
            className="px-5"
            scrollEnabled
            data={allGreetingsEmail && allGreetingsEmail}
            renderItem={({ item, index }) => (
              <NotificationCard
                item={item}
                index={index}
                isGreetingEmail={true}
                lastIndex={allGreetingsEmail.length - 1}
                uniqueId={uniqueId}
                sendTo={false}
              />
            )}
          />
        ) : loadingGreetingsEmail ? (
          <View
            style={{ width: windowWidth }}
            className="flex-1 justify-center items-center"
          >
            <ActivityIndicator size={"small"} color={"#4169E1"} />
          </View>
        ) : (
          <View
            style={{ width: windowWidth, marginTop: 20 }}
            className="h-full flex-1 justify-center items-center"
          >
            <CustomTextRegular className="text-center">
              No email message
            </CustomTextRegular>
          </View>
        )}
      </ScrollView>
      {/* loading goals */}
      {loadingEmail ||
        (loadingGreetingsEmail && (
          <LottieLoadingScreen
            loading={loadingEmail || loadingGreetingsEmail}
          />
        ))}
    </SafeAreaView>
  );
};

export default NotificationScreen;
